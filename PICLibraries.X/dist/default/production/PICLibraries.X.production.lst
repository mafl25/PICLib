

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Jul 29 16:46:23 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F13K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    20  0000                     _TMR3	set	4018
    21  0000                     _ANSELHbits	set	3967
    22  0000                     _BAUDCON	set	4024
    23  0000                     _INTCON	set	4082
    24  0000                     _PIE2bits	set	4000
    25  0000                     _PIR2bits	set	4001
    26  0000                     _RCREG	set	4014
    27  0000                     _RCSTA	set	4011
    28  0000                     _RCSTAbits	set	4011
    29  0000                     _SPBRG	set	4015
    30  0000                     _SPBRGH	set	4016
    31  0000                     _SSPBUF	set	4041
    32  0000                     _SSPCON1	set	4038
    33  0000                     _SSPCON1bits	set	4038
    34  0000                     _SSPSTAT	set	4039
    35  0000                     _SSPSTATbits	set	4039
    36  0000                     _T3CON	set	4017
    37  0000                     _TRISBbits	set	3987
    38  0000                     _TRISCbits	set	3988
    39  0000                     _TXREG	set	4013
    40  0000                     _TXSTA	set	4012
    41  0000                     _RCIE	set	31981
    42  0000                     _RCIF	set	31989
    43  0000                     _SSPIF	set	31987
    44  0000                     _TXIE	set	31980
    45  0000                     _TXIF	set	31988
    46                           
    47 ;;
    48 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
    49 ;;
    50 ;; *************** function _main *****************
    51 ;; Defined at:
    52 ;;		line 66 in file "main.c"
    53 ;; Parameters:    Size  Location     Type
    54 ;;		None
    55 ;; Auto vars:     Size  Location     Type
    56 ;;  data           10   30[COMRAM] unsigned char [10]
    57 ;; Return value:  Size  Location     Type
    58 ;;                  2   23[None  ] int 
    59 ;; Registers used:
    60 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
    61 ;; Tracked objects:
    62 ;;		On entry : 0/0
    63 ;;		On exit  : 0/0
    64 ;;		Unchanged: 0/0
    65 ;; Data sizes:     COMRAM   BANK0
    66 ;;      Params:         0       0
    67 ;;      Locals:        10       0
    68 ;;      Temps:          1       0
    69 ;;      Totals:        11       0
    70 ;;Total ram usage:       11 bytes
    71 ;; Hardware stack levels required when called:    4
    72 ;; This function calls:
    73 ;;		_serial_get_data
    74 ;;		_serial_send_byte
    75 ;;		_serial_send_data
    76 ;;		_setup_simple_serial
    77 ;; This function is called by:
    78 ;;		Startup code after reset
    79 ;; This function uses a non-reentrant model
    80 ;;
    81                           
    82                           	psect	text0
    83  000216                     __ptext0:
    84                           	opt stack 0
    85  000216                     _main:
    86                           	opt stack 27
    87                           
    88                           ;main.c: 67: _delay((unsigned long)((10)*(20000000/4000.0)));
    89                           
    90                           ;incstack = 0
    91  000216  0E41               	movlw	65
    92  000218  6E1E               	movwf	??_main& (0+255),c
    93  00021A  0EEE               	movlw	238
    94  00021C                     u927:
    95  00021C  2EE8               	decfsz	wreg,f,c
    96  00021E  D7FE               	goto	u927
    97  000220  2E1E               	decfsz	??_main& (0+255),f,c
    98  000222  D7FC               	goto	u927
    99  000224  D000               	nop2	
   100                           
   101                           ;main.c: 68: setup_simple_serial(0x08 | 0x04, 0x81);
   102  000226  0E00               	movlw	0
   103  000228  6E14               	movwf	setup_simple_serial@baudrate_value+1,c
   104  00022A  0E81               	movlw	129
   105  00022C  6E13               	movwf	setup_simple_serial@baudrate_value,c
   106  00022E  0E0C               	movlw	12
   107  000230  EC3A  F001         	call	_setup_simple_serial
   108                           
   109                           ;main.c: 69: uint8_t data[10] = {};
   110  000234  EE20  F029         	lfsr	2,main@F3928
   111  000238  EE10  F01F         	lfsr	1,main@data
   112  00023C  0E09               	movlw	9
   113  00023E                     u721:
   114  00023E  CFDB FFE3          	movff	plusw2,plusw1
   115  000242  06E8               	decf	wreg,f,c
   116  000244  E2FC               	bc	u721
   117                           
   118                           ;main.c: 72: serial_send_byte(0xAA);
   119  000246  0EAA               	movlw	170
   120  000248  EC91  F001         	call	_serial_send_byte
   121  00024C  D000               	goto	l1337
   122  00024E                     l1337:
   123                           
   124                           ;main.c: 75: serial_get_data(data, 10);
   125  00024E  0E1F               	movlw	low main@data
   126  000250  6E19               	movwf	serial_get_data@data,c
   127  000252  0E00               	movlw	high main@data
   128  000254  6E1A               	movwf	serial_get_data@data+1,c
   129  000256  0E0A               	movlw	10
   130  000258  6E1B               	movwf	serial_get_data@size,c
   131  00025A  EC4D  F000         	call	_serial_get_data	;wreg free
   132                           
   133                           ;main.c: 76: serial_send_data(data, 10);
   134  00025E  0E1F               	movlw	low main@data
   135  000260  6E19               	movwf	serial_send_data@data,c
   136  000262  0E00               	movlw	high main@data
   137  000264  6E1A               	movwf	serial_send_data@data+1,c
   138  000266  0E0A               	movlw	10
   139  000268  6E1B               	movwf	serial_send_data@size,c
   140  00026A  ECB4  F000         	call	_serial_send_data	;wreg free
   141  00026E  D7EF               	goto	l1337
   142                           
   143                           ;main.c: 77: }
   144                           ;main.c: 79: return (0);
   145                           ;	Return value of _main is never used
   146  000270  EF4B  F000         	goto	start
   147  000274                     __end_of_main:
   148                           	opt stack 0
   149                           wreg	equ	0xFE8
   150                           plusw1	equ	0xFE3
   151                           plusw2	equ	0xFDB
   152                           
   153                           	psect	cinit
   154  000310                     __pcinit:
   155                           	opt stack 0
   156  000310                     start_initialization:
   157                           	opt stack 0
   158  000310                     __initialization:
   159                           	opt stack 0
   160                           
   161                           ; Clear objects allocated to COMRAM (11 bytes)
   162  000310  EE00  F029         	lfsr	0,__pbssCOMRAM
   163  000314  0E0B               	movlw	11
   164  000316                     clear_0:
   165  000316  6AEE               	clrf	postinc0,c
   166  000318  06E8               	decf	wreg,f,c
   167  00031A  E1FD               	bnz	clear_0
   168  00031C                     end_of_initialization:
   169                           	opt stack 0
   170  00031C                     __end_of__initialization:
   171                           	opt stack 0
   172  00031C  0100               	movlb	0
   173  00031E  EF0B  F001         	goto	_main	;jump to C main() function
   174                           postinc0	equ	0xFEE
   175                           wreg	equ	0xFE8
   176                           plusw1	equ	0xFE3
   177                           plusw2	equ	0xFDB
   178                           
   179                           	psect	bssCOMRAM
   180  000029                     __pbssCOMRAM:
   181                           	opt stack 0
   182  000029                     main@F3928:
   183                           	opt stack 0
   184  000029                     	ds	10
   185  000033                     _dummy_byte:
   186                           	opt stack 0
   187  000033                     	ds	1
   188                           postinc0	equ	0xFEE
   189                           wreg	equ	0xFE8
   190                           plusw1	equ	0xFE3
   191                           plusw2	equ	0xFDB
   192                           
   193                           	psect	cstackCOMRAM
   194  000001                     __pcstackCOMRAM:
   195                           	opt stack 0
   196  000001                     i2serial_send_byte@byte:
   197                           	opt stack 0
   198  000001                     serial_peek_receive@byte:
   199                           	opt stack 0
   200                           
   201                           ; 2 bytes @ 0x0
   202  000001                     	ds	2
   203  000003                     serial_peek_receive@get_byte:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x2
   207  000003                     	ds	1
   208  000004                     ??_isr:
   209                           
   210                           ; 0 bytes @ 0x3
   211  000004                     	ds	14
   212  000012                     isr@byte:
   213                           	opt stack 0
   214                           
   215                           ; 1 bytes @ 0x11
   216  000012                     	ds	1
   217  000013                     ?___wmul:
   218                           	opt stack 0
   219  000013                     serial_send_byte@byte:
   220                           	opt stack 0
   221  000013                     setup_simple_serial@baudrate_value:
   222                           	opt stack 0
   223  000013                     ___wmul@multiplier:
   224                           	opt stack 0
   225                           
   226                           ; 2 bytes @ 0x12
   227  000013                     	ds	2
   228  000015                     _setup_simple_serial$182:
   229                           	opt stack 0
   230  000015                     ___wmul@multiplicand:
   231                           	opt stack 0
   232                           
   233                           ; 2 bytes @ 0x14
   234  000015                     	ds	2
   235  000017                     _setup_simple_serial$183:
   236                           	opt stack 0
   237  000017                     ___wmul@product:
   238                           	opt stack 0
   239                           
   240                           ; 2 bytes @ 0x16
   241  000017                     	ds	2
   242  000019                     setup_simple_serial@baudrate_bits:
   243                           	opt stack 0
   244  000019                     serial_get_data@data:
   245                           	opt stack 0
   246  000019                     serial_send_data@data:
   247                           	opt stack 0
   248                           
   249                           ; 2 bytes @ 0x18
   250  000019                     	ds	2
   251  00001B                     serial_get_data@size:
   252                           	opt stack 0
   253  00001B                     serial_send_data@size:
   254                           	opt stack 0
   255                           
   256                           ; 1 bytes @ 0x1A
   257  00001B                     	ds	1
   258  00001C                     ??_serial_get_data:
   259  00001C                     ??_serial_send_data:
   260                           
   261                           ; 0 bytes @ 0x1B
   262  00001C                     	ds	1
   263  00001D                     serial_get_data@i:
   264                           	opt stack 0
   265  00001D                     serial_send_data@i:
   266                           	opt stack 0
   267                           
   268                           ; 1 bytes @ 0x1C
   269  00001D                     	ds	1
   270  00001E                     ??_main:
   271                           
   272                           ; 0 bytes @ 0x1D
   273  00001E                     	ds	1
   274  00001F                     main@data:
   275                           	opt stack 0
   276                           
   277                           ; 10 bytes @ 0x1E
   278  00001F                     	ds	10
   279                           postinc0	equ	0xFEE
   280                           wreg	equ	0xFE8
   281                           plusw1	equ	0xFE3
   282                           plusw2	equ	0xFDB
   283                           
   284 ;; *************** function _setup_simple_serial *****************
   285 ;; Defined at:
   286 ;;		line 18 in file "serial_pic.c"
   287 ;; Parameters:    Size  Location     Type
   288 ;;  baudrate_bit    1    wreg     unsigned char 
   289 ;;  baudrate_val    2   18[COMRAM] unsigned int 
   290 ;; Auto vars:     Size  Location     Type
   291 ;;  baudrate_bit    1   24[COMRAM] unsigned char 
   292 ;; Return value:  Size  Location     Type
   293 ;;		None               void
   294 ;; Registers used:
   295 ;;		wreg, status,2
   296 ;; Tracked objects:
   297 ;;		On entry : 0/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMRAM   BANK0
   301 ;;      Params:         2       0
   302 ;;      Locals:         5       0
   303 ;;      Temps:          0       0
   304 ;;      Totals:         7       0
   305 ;;Total ram usage:        7 bytes
   306 ;; Hardware stack levels used:    1
   307 ;; Hardware stack levels required when called:    2
   308 ;; This function calls:
   309 ;;		Nothing
   310 ;; This function is called by:
   311 ;;		_main
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315                           	psect	text1
   316  000274                     __ptext1:
   317                           	opt stack 0
   318  000274                     _setup_simple_serial:
   319                           	opt stack 28
   320                           
   321                           ;incstack = 0
   322                           ;setup_simple_serial@baudrate_bits stored from wreg
   323  000274  6E19               	movwf	setup_simple_serial@baudrate_bits,c
   324                           
   325                           ;serial_pic.c: 20: ANSELHbits.ANS11 = 0;
   326  000276  967F               	bcf	3967,3,c	;volatile
   327                           
   328                           ;serial_pic.c: 21: TXSTA = (baudrate_bits & 0x04) ? 0x24: 0x20;
   329  000278  B419               	btfsc	setup_simple_serial@baudrate_bits,2,c
   330  00027A  D004               	goto	l1251
   331  00027C  0E00               	movlw	0
   332  00027E  6E16               	movwf	_setup_simple_serial$182+1,c
   333  000280  0E20               	movlw	32
   334  000282  D003               	goto	L1
   335  000284                     l1251:
   336  000284  0E00               	movlw	0
   337  000286  6E16               	movwf	_setup_simple_serial$182+1,c
   338  000288  0E24               	movlw	36
   339  00028A                     L1:
   340  00028A  6E15               	movwf	_setup_simple_serial$182,c
   341  00028C  D000               	goto	l1253
   342  00028E                     l1253:
   343  00028E  C015  FFAC         	movff	_setup_simple_serial$182,4012	;volatile
   344                           
   345                           ;serial_pic.c: 22: RCSTA = 0x90;
   346  000292  0E90               	movlw	144
   347  000294  6EAB               	movwf	4011,c	;volatile
   348                           
   349                           ;serial_pic.c: 23: BAUDCON = (baudrate_bits & 0x08) ? 0x08 : 0x00;
   350  000296  B619               	btfsc	setup_simple_serial@baudrate_bits,3,c
   351  000298  D004               	goto	l1259
   352  00029A  0E00               	movlw	0
   353  00029C  6E18               	movwf	_setup_simple_serial$183+1,c
   354  00029E  0E00               	movlw	0
   355  0002A0  D003               	goto	L2
   356  0002A2                     l1259:
   357  0002A2  0E00               	movlw	0
   358  0002A4  6E18               	movwf	_setup_simple_serial$183+1,c
   359  0002A6  0E08               	movlw	8
   360  0002A8                     L2:
   361  0002A8  6E17               	movwf	_setup_simple_serial$183,c
   362  0002AA  D000               	goto	l1261
   363  0002AC                     l1261:
   364  0002AC  C017  FFB8         	movff	_setup_simple_serial$183,4024	;volatile
   365                           
   366                           ;serial_pic.c: 25: SPBRGH = baudrate_value >> 8;
   367  0002B0  5014               	movf	setup_simple_serial@baudrate_value+1,w,c
   368  0002B2  6EB0               	movwf	4016,c	;volatile
   369                           
   370                           ;serial_pic.c: 26: SPBRG = baudrate_value;
   371  0002B4  C013  FFAF         	movff	setup_simple_serial@baudrate_value,4015	;volatile
   372  0002B8  0012               	return		;funcret
   373  0002BA                     __end_of_setup_simple_serial:
   374                           	opt stack 0
   375                           postinc0	equ	0xFEE
   376                           wreg	equ	0xFE8
   377                           plusw1	equ	0xFE3
   378                           plusw2	equ	0xFDB
   379                           
   380 ;; *************** function _serial_send_data *****************
   381 ;; Defined at:
   382 ;;		line 72 in file "serial_pic.c"
   383 ;; Parameters:    Size  Location     Type
   384 ;;  data            2   24[COMRAM] PTR unsigned char 
   385 ;;		 -> main@data(10), 
   386 ;;  size            1   26[COMRAM] char 
   387 ;; Auto vars:     Size  Location     Type
   388 ;;  i               1   28[COMRAM] char 
   389 ;; Return value:  Size  Location     Type
   390 ;;                  1    wreg      char 
   391 ;; Registers used:
   392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   393 ;; Tracked objects:
   394 ;;		On entry : 0/0
   395 ;;		On exit  : 0/0
   396 ;;		Unchanged: 0/0
   397 ;; Data sizes:     COMRAM   BANK0
   398 ;;      Params:         3       0
   399 ;;      Locals:         1       0
   400 ;;      Temps:          1       0
   401 ;;      Totals:         5       0
   402 ;;Total ram usage:        5 bytes
   403 ;; Hardware stack levels used:    1
   404 ;; Hardware stack levels required when called:    3
   405 ;; This function calls:
   406 ;;		___wmul
   407 ;;		_serial_send_byte
   408 ;; This function is called by:
   409 ;;		_main
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413                           	psect	text2
   414  000168                     __ptext2:
   415                           	opt stack 0
   416  000168                     _serial_send_data:
   417                           	opt stack 27
   418                           
   419                           ;serial_pic.c: 74: int8_t i;
   420                           ;serial_pic.c: 76: if (size < 0) {
   421                           
   422                           ;incstack = 0
   423  000168  AE1B               	btfss	serial_send_data@size,7,c
   424  00016A  D031               	goto	l1297
   425                           
   426                           ;serial_pic.c: 77: for (i = 0; data[i] != 0; i++)
   427  00016C  0E00               	movlw	0
   428  00016E  6E1D               	movwf	serial_send_data@i,c
   429  000170  D016               	goto	l1293
   430  000172                     l1289:
   431                           
   432                           ;serial_pic.c: 78: serial_send_byte(data[i]);
   433  000172  501D               	movf	serial_send_data@i,w,c
   434  000174  6E13               	movwf	___wmul@multiplier,c
   435  000176  6A14               	clrf	___wmul@multiplier+1,c
   436  000178  BE13               	btfsc	___wmul@multiplier,7,c
   437  00017A  0614               	decf	___wmul@multiplier+1,f,c
   438  00017C  0E00               	movlw	0
   439  00017E  6E16               	movwf	___wmul@multiplicand+1,c
   440  000180  0E01               	movlw	1
   441  000182  6E15               	movwf	___wmul@multiplicand,c
   442  000184  EC74  F001         	call	___wmul	;wreg free
   443  000188  5013               	movf	?___wmul,w,c
   444  00018A  2419               	addwf	serial_send_data@data,w,c
   445  00018C  6ED9               	movwf	fsr2l,c
   446  00018E  5014               	movf	?___wmul+1,w,c
   447  000190  201A               	addwfc	serial_send_data@data+1,w,c
   448  000192  6EDA               	movwf	fsr2h,c
   449  000194  50DF               	movf	indf2,w,c
   450  000196  EC91  F001         	call	_serial_send_byte
   451  00019A  2A1D               	incf	serial_send_data@i,f,c
   452  00019C  D000               	goto	l1293
   453  00019E                     l1293:
   454  00019E  501D               	movf	serial_send_data@i,w,c
   455  0001A0  6E13               	movwf	___wmul@multiplier,c
   456  0001A2  6A14               	clrf	___wmul@multiplier+1,c
   457  0001A4  BE13               	btfsc	___wmul@multiplier,7,c
   458  0001A6  0614               	decf	___wmul@multiplier+1,f,c
   459  0001A8  0E00               	movlw	0
   460  0001AA  6E16               	movwf	___wmul@multiplicand+1,c
   461  0001AC  0E01               	movlw	1
   462  0001AE  6E15               	movwf	___wmul@multiplicand,c
   463  0001B0  EC74  F001         	call	___wmul	;wreg free
   464  0001B4  5013               	movf	?___wmul,w,c
   465  0001B6  2419               	addwf	serial_send_data@data,w,c
   466  0001B8  6ED9               	movwf	fsr2l,c
   467  0001BA  5014               	movf	?___wmul+1,w,c
   468  0001BC  201A               	addwfc	serial_send_data@data+1,w,c
   469  0001BE  6EDA               	movwf	fsr2h,c
   470  0001C0  50DF               	movf	indf2,w,c
   471  0001C2  A4D8               	btfss	status,2,c
   472  0001C4  D7D6               	goto	l1289
   473                           
   474                           ;serial_pic.c: 79: serial_send_byte(0);
   475  0001C6  0E00               	movlw	0
   476  0001C8  EC91  F001         	call	_serial_send_byte
   477                           
   478                           ;serial_pic.c: 80: } else {
   479  0001CC  0012               	return	
   480  0001CE                     l1297:
   481                           
   482                           ;serial_pic.c: 81: for (i = 0; i < size; i++)
   483  0001CE  0E00               	movlw	0
   484  0001D0  6E1D               	movwf	serial_send_data@i,c
   485  0001D2  D016               	goto	l1303
   486  0001D4                     l1299:
   487                           
   488                           ;serial_pic.c: 82: serial_send_byte(data[i]);
   489  0001D4  501D               	movf	serial_send_data@i,w,c
   490  0001D6  6E13               	movwf	___wmul@multiplier,c
   491  0001D8  6A14               	clrf	___wmul@multiplier+1,c
   492  0001DA  BE13               	btfsc	___wmul@multiplier,7,c
   493  0001DC  0614               	decf	___wmul@multiplier+1,f,c
   494  0001DE  0E00               	movlw	0
   495  0001E0  6E16               	movwf	___wmul@multiplicand+1,c
   496  0001E2  0E01               	movlw	1
   497  0001E4  6E15               	movwf	___wmul@multiplicand,c
   498  0001E6  EC74  F001         	call	___wmul	;wreg free
   499  0001EA  5013               	movf	?___wmul,w,c
   500  0001EC  2419               	addwf	serial_send_data@data,w,c
   501  0001EE  6ED9               	movwf	fsr2l,c
   502  0001F0  5014               	movf	?___wmul+1,w,c
   503  0001F2  201A               	addwfc	serial_send_data@data+1,w,c
   504  0001F4  6EDA               	movwf	fsr2h,c
   505  0001F6  50DF               	movf	indf2,w,c
   506  0001F8  EC91  F001         	call	_serial_send_byte
   507  0001FC  2A1D               	incf	serial_send_data@i,f,c
   508  0001FE  D000               	goto	l1303
   509  000200                     l1303:
   510  000200  501D               	movf	serial_send_data@i,w,c
   511  000202  0A80               	xorlw	128
   512  000204  6E1C               	movwf	??_serial_send_data& (0+255),c
   513  000206  501B               	movf	serial_send_data@size,w,c
   514  000208  0A80               	xorlw	128
   515  00020A  5C1C               	subwf	??_serial_send_data& (0+255),w,c
   516  00020C  B0D8               	btfsc	status,0,c
   517  00020E  0012               	return	
   518  000210  D7E1               	goto	l1299
   519  000212  0012               	return	
   520                           
   521                           ;serial_pic.c: 83: }
   522                           ;serial_pic.c: 85: return i;
   523                           ;	Return value of _serial_send_data is never used
   524  000214  0012               	return		;funcret
   525  000216                     __end_of_serial_send_data:
   526                           	opt stack 0
   527                           postinc0	equ	0xFEE
   528                           wreg	equ	0xFE8
   529                           plusw1	equ	0xFE3
   530                           indf2	equ	0xFDF
   531                           plusw2	equ	0xFDB
   532                           fsr2h	equ	0xFDA
   533                           fsr2l	equ	0xFD9
   534                           status	equ	0xFD8
   535                           
   536 ;; *************** function _serial_send_byte *****************
   537 ;; Defined at:
   538 ;;		line 66 in file "serial_pic.c"
   539 ;; Parameters:    Size  Location     Type
   540 ;;  byte            1    wreg     unsigned char 
   541 ;; Auto vars:     Size  Location     Type
   542 ;;  byte            1   18[COMRAM] unsigned char 
   543 ;; Return value:  Size  Location     Type
   544 ;;		None               void
   545 ;; Registers used:
   546 ;;		wreg
   547 ;; Tracked objects:
   548 ;;		On entry : 0/0
   549 ;;		On exit  : 0/0
   550 ;;		Unchanged: 0/0
   551 ;; Data sizes:     COMRAM   BANK0
   552 ;;      Params:         0       0
   553 ;;      Locals:         1       0
   554 ;;      Temps:          0       0
   555 ;;      Totals:         1       0
   556 ;;Total ram usage:        1 bytes
   557 ;; Hardware stack levels used:    1
   558 ;; Hardware stack levels required when called:    2
   559 ;; This function calls:
   560 ;;		Nothing
   561 ;; This function is called by:
   562 ;;		_main
   563 ;;		_serial_send_data
   564 ;;		_serial_send_buffer
   565 ;; This function uses a non-reentrant model
   566 ;;
   567                           
   568                           	psect	text3
   569  000322                     __ptext3:
   570                           	opt stack 0
   571  000322                     _serial_send_byte:
   572                           	opt stack 27
   573                           
   574                           ;incstack = 0
   575                           ;serial_send_byte@byte stored from wreg
   576  000322  6E13               	movwf	serial_send_byte@byte,c
   577                           
   578                           ;serial_pic.c: 68: while (!TXIF);
   579  000324  D000               	goto	l102
   580  000326                     l102:
   581  000326  A89E               	btfss	3998,4,c	;volatile
   582  000328  D7FE               	goto	l102
   583                           
   584                           ;serial_pic.c: 69: TXREG = byte;
   585  00032A  C013  FFAD         	movff	serial_send_byte@byte,4013	;volatile
   586  00032E  0012               	return		;funcret
   587  000330                     __end_of_serial_send_byte:
   588                           	opt stack 0
   589                           postinc0	equ	0xFEE
   590                           wreg	equ	0xFE8
   591                           plusw1	equ	0xFE3
   592                           indf2	equ	0xFDF
   593                           plusw2	equ	0xFDB
   594                           fsr2h	equ	0xFDA
   595                           fsr2l	equ	0xFD9
   596                           status	equ	0xFD8
   597                           
   598 ;; *************** function _serial_get_data *****************
   599 ;; Defined at:
   600 ;;		line 50 in file "serial_pic.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;  data            2   24[COMRAM] PTR unsigned char 
   603 ;;		 -> main@data(10), 
   604 ;;  size            1   26[COMRAM] char 
   605 ;; Auto vars:     Size  Location     Type
   606 ;;  i               1   28[COMRAM] char 
   607 ;; Return value:  Size  Location     Type
   608 ;;                  1    wreg      char 
   609 ;; Registers used:
   610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
   611 ;; Tracked objects:
   612 ;;		On entry : 0/0
   613 ;;		On exit  : 0/0
   614 ;;		Unchanged: 0/0
   615 ;; Data sizes:     COMRAM   BANK0
   616 ;;      Params:         3       0
   617 ;;      Locals:         1       0
   618 ;;      Temps:          1       0
   619 ;;      Totals:         5       0
   620 ;;Total ram usage:        5 bytes
   621 ;; Hardware stack levels used:    1
   622 ;; Hardware stack levels required when called:    3
   623 ;; This function calls:
   624 ;;		___wmul
   625 ;;		_serial_get_byte
   626 ;; This function is called by:
   627 ;;		_main
   628 ;; This function uses a non-reentrant model
   629 ;;
   630                           
   631                           	psect	text4
   632  00009A                     __ptext4:
   633                           	opt stack 0
   634  00009A                     _serial_get_data:
   635                           	opt stack 27
   636                           
   637                           ;serial_pic.c: 52: int8_t i;
   638                           ;serial_pic.c: 54: if (size < 0) {
   639                           
   640                           ;incstack = 0
   641  00009A  AE1B               	btfss	serial_get_data@size,7,c
   642  00009C  D041               	goto	l1277
   643                           
   644                           ;serial_pic.c: 55: for (i = 0; data[i] != 0; i++)
   645  00009E  0E00               	movlw	0
   646  0000A0  6E1D               	movwf	serial_get_data@i,c
   647  0000A2  D016               	goto	l1273
   648  0000A4                     l1269:
   649                           
   650                           ;serial_pic.c: 56: data[i] = serial_get_byte();
   651  0000A4  501D               	movf	serial_get_data@i,w,c
   652  0000A6  6E13               	movwf	___wmul@multiplier,c
   653  0000A8  6A14               	clrf	___wmul@multiplier+1,c
   654  0000AA  BE13               	btfsc	___wmul@multiplier,7,c
   655  0000AC  0614               	decf	___wmul@multiplier+1,f,c
   656  0000AE  0E00               	movlw	0
   657  0000B0  6E16               	movwf	___wmul@multiplicand+1,c
   658  0000B2  0E01               	movlw	1
   659  0000B4  6E15               	movwf	___wmul@multiplicand,c
   660  0000B6  EC74  F001         	call	___wmul	;wreg free
   661  0000BA  5013               	movf	?___wmul,w,c
   662  0000BC  2419               	addwf	serial_get_data@data,w,c
   663  0000BE  6ED9               	movwf	fsr2l,c
   664  0000C0  5014               	movf	?___wmul+1,w,c
   665  0000C2  201A               	addwfc	serial_get_data@data+1,w,c
   666  0000C4  6EDA               	movwf	fsr2h,c
   667  0000C6  EC9F  F001         	call	_serial_get_byte	;wreg free
   668  0000CA  6EDF               	movwf	indf2,c
   669  0000CC  2A1D               	incf	serial_get_data@i,f,c
   670  0000CE  D000               	goto	l1273
   671  0000D0                     l1273:
   672  0000D0  501D               	movf	serial_get_data@i,w,c
   673  0000D2  6E13               	movwf	___wmul@multiplier,c
   674  0000D4  6A14               	clrf	___wmul@multiplier+1,c
   675  0000D6  BE13               	btfsc	___wmul@multiplier,7,c
   676  0000D8  0614               	decf	___wmul@multiplier+1,f,c
   677  0000DA  0E00               	movlw	0
   678  0000DC  6E16               	movwf	___wmul@multiplicand+1,c
   679  0000DE  0E01               	movlw	1
   680  0000E0  6E15               	movwf	___wmul@multiplicand,c
   681  0000E2  EC74  F001         	call	___wmul	;wreg free
   682  0000E6  5013               	movf	?___wmul,w,c
   683  0000E8  2419               	addwf	serial_get_data@data,w,c
   684  0000EA  6ED9               	movwf	fsr2l,c
   685  0000EC  5014               	movf	?___wmul+1,w,c
   686  0000EE  201A               	addwfc	serial_get_data@data+1,w,c
   687  0000F0  6EDA               	movwf	fsr2h,c
   688  0000F2  50DF               	movf	indf2,w,c
   689  0000F4  A4D8               	btfss	status,2,c
   690  0000F6  D7D6               	goto	l1269
   691                           
   692                           ;serial_pic.c: 57: data[i] = 0;
   693  0000F8  501D               	movf	serial_get_data@i,w,c
   694  0000FA  6E13               	movwf	___wmul@multiplier,c
   695  0000FC  6A14               	clrf	___wmul@multiplier+1,c
   696  0000FE  BE13               	btfsc	___wmul@multiplier,7,c
   697  000100  0614               	decf	___wmul@multiplier+1,f,c
   698  000102  0E00               	movlw	0
   699  000104  6E16               	movwf	___wmul@multiplicand+1,c
   700  000106  0E01               	movlw	1
   701  000108  6E15               	movwf	___wmul@multiplicand,c
   702  00010A  EC74  F001         	call	___wmul	;wreg free
   703  00010E  5013               	movf	?___wmul,w,c
   704  000110  2419               	addwf	serial_get_data@data,w,c
   705  000112  6ED9               	movwf	fsr2l,c
   706  000114  5014               	movf	?___wmul+1,w,c
   707  000116  201A               	addwfc	serial_get_data@data+1,w,c
   708  000118  6EDA               	movwf	fsr2h,c
   709  00011A  0E00               	movlw	0
   710  00011C  6EDF               	movwf	indf2,c
   711                           
   712                           ;serial_pic.c: 58: } else {
   713  00011E  0012               	return	
   714  000120                     l1277:
   715                           
   716                           ;serial_pic.c: 59: for (i = 0; i < size; i++)
   717  000120  0E00               	movlw	0
   718  000122  6E1D               	movwf	serial_get_data@i,c
   719  000124  D016               	goto	l1283
   720  000126                     l1279:
   721                           
   722                           ;serial_pic.c: 60: data[i] = serial_get_byte();
   723  000126  501D               	movf	serial_get_data@i,w,c
   724  000128  6E13               	movwf	___wmul@multiplier,c
   725  00012A  6A14               	clrf	___wmul@multiplier+1,c
   726  00012C  BE13               	btfsc	___wmul@multiplier,7,c
   727  00012E  0614               	decf	___wmul@multiplier+1,f,c
   728  000130  0E00               	movlw	0
   729  000132  6E16               	movwf	___wmul@multiplicand+1,c
   730  000134  0E01               	movlw	1
   731  000136  6E15               	movwf	___wmul@multiplicand,c
   732  000138  EC74  F001         	call	___wmul	;wreg free
   733  00013C  5013               	movf	?___wmul,w,c
   734  00013E  2419               	addwf	serial_get_data@data,w,c
   735  000140  6ED9               	movwf	fsr2l,c
   736  000142  5014               	movf	?___wmul+1,w,c
   737  000144  201A               	addwfc	serial_get_data@data+1,w,c
   738  000146  6EDA               	movwf	fsr2h,c
   739  000148  EC9F  F001         	call	_serial_get_byte	;wreg free
   740  00014C  6EDF               	movwf	indf2,c
   741  00014E  2A1D               	incf	serial_get_data@i,f,c
   742  000150  D000               	goto	l1283
   743  000152                     l1283:
   744  000152  501D               	movf	serial_get_data@i,w,c
   745  000154  0A80               	xorlw	128
   746  000156  6E1C               	movwf	??_serial_get_data& (0+255),c
   747  000158  501B               	movf	serial_get_data@size,w,c
   748  00015A  0A80               	xorlw	128
   749  00015C  5C1C               	subwf	??_serial_get_data& (0+255),w,c
   750  00015E  B0D8               	btfsc	status,0,c
   751  000160  0012               	return	
   752  000162  D7E1               	goto	l1279
   753  000164  0012               	return	
   754                           
   755                           ;serial_pic.c: 61: }
   756                           ;serial_pic.c: 63: return i;
   757                           ;	Return value of _serial_get_data is never used
   758  000166  0012               	return		;funcret
   759  000168                     __end_of_serial_get_data:
   760                           	opt stack 0
   761                           postinc0	equ	0xFEE
   762                           wreg	equ	0xFE8
   763                           plusw1	equ	0xFE3
   764                           indf2	equ	0xFDF
   765                           plusw2	equ	0xFDB
   766                           fsr2h	equ	0xFDA
   767                           fsr2l	equ	0xFD9
   768                           status	equ	0xFD8
   769                           
   770 ;; *************** function _serial_get_byte *****************
   771 ;; Defined at:
   772 ;;		line 43 in file "serial_pic.c"
   773 ;; Parameters:    Size  Location     Type
   774 ;;		None
   775 ;; Auto vars:     Size  Location     Type
   776 ;;		None
   777 ;; Return value:  Size  Location     Type
   778 ;;                  1    wreg      unsigned char 
   779 ;; Registers used:
   780 ;;		wreg, status,2
   781 ;; Tracked objects:
   782 ;;		On entry : 0/0
   783 ;;		On exit  : 0/0
   784 ;;		Unchanged: 0/0
   785 ;; Data sizes:     COMRAM   BANK0
   786 ;;      Params:         0       0
   787 ;;      Locals:         0       0
   788 ;;      Temps:          0       0
   789 ;;      Totals:         0       0
   790 ;;Total ram usage:        0 bytes
   791 ;; Hardware stack levels used:    1
   792 ;; Hardware stack levels required when called:    2
   793 ;; This function calls:
   794 ;;		Nothing
   795 ;; This function is called by:
   796 ;;		_serial_get_data
   797 ;; This function uses a non-reentrant model
   798 ;;
   799                           
   800                           	psect	text5
   801  00033E                     __ptext5:
   802                           	opt stack 0
   803  00033E                     _serial_get_byte:
   804                           	opt stack 27
   805                           
   806                           ;serial_pic.c: 45: while (!RCIF);
   807                           
   808                           ;incstack = 0
   809  00033E  D000               	goto	l85
   810  000340                     l85:
   811  000340  AA9E               	btfss	3998,5,c	;volatile
   812  000342  D7FE               	goto	l85
   813                           
   814                           ;serial_pic.c: 47: return RCREG;
   815  000344  50AE               	movf	4014,w,c	;volatile
   816  000346  0012               	return	
   817  000348  0012               	return		;funcret
   818  00034A                     __end_of_serial_get_byte:
   819                           	opt stack 0
   820                           postinc0	equ	0xFEE
   821                           wreg	equ	0xFE8
   822                           plusw1	equ	0xFE3
   823                           indf2	equ	0xFDF
   824                           plusw2	equ	0xFDB
   825                           fsr2h	equ	0xFDA
   826                           fsr2l	equ	0xFD9
   827                           status	equ	0xFD8
   828                           
   829 ;; *************** function ___wmul *****************
   830 ;; Defined at:
   831 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
   832 ;; Parameters:    Size  Location     Type
   833 ;;  multiplier      2   18[COMRAM] unsigned int 
   834 ;;  multiplicand    2   20[COMRAM] unsigned int 
   835 ;; Auto vars:     Size  Location     Type
   836 ;;  product         2   22[COMRAM] unsigned int 
   837 ;; Return value:  Size  Location     Type
   838 ;;                  2   18[COMRAM] unsigned int 
   839 ;; Registers used:
   840 ;;		wreg, status,2, status,0, prodl, prodh
   841 ;; Tracked objects:
   842 ;;		On entry : 0/0
   843 ;;		On exit  : 0/0
   844 ;;		Unchanged: 0/0
   845 ;; Data sizes:     COMRAM   BANK0
   846 ;;      Params:         4       0
   847 ;;      Locals:         2       0
   848 ;;      Temps:          0       0
   849 ;;      Totals:         6       0
   850 ;;Total ram usage:        6 bytes
   851 ;; Hardware stack levels used:    1
   852 ;; Hardware stack levels required when called:    2
   853 ;; This function calls:
   854 ;;		Nothing
   855 ;; This function is called by:
   856 ;;		_serial_get_data
   857 ;;		_serial_send_data
   858 ;;		_serial_send_buffer
   859 ;;		_spi_send_data
   860 ;;		_spi_master_get_data
   861 ;;		_spi_slave_get_data
   862 ;; This function uses a non-reentrant model
   863 ;;
   864                           
   865                           	psect	text6
   866  0002E8                     __ptext6:
   867                           	opt stack 0
   868  0002E8                     ___wmul:
   869                           	opt stack 27
   870                           
   871                           ;incstack = 0
   872  0002E8  5013               	movf	___wmul@multiplier,w,c
   873  0002EA  0215               	mulwf	___wmul@multiplicand,c
   874  0002EC  CFF3 F017          	movff	prodl,___wmul@product
   875  0002F0  CFF4 F018          	movff	prodh,___wmul@product+1
   876  0002F4  5013               	movf	___wmul@multiplier,w,c
   877  0002F6  0216               	mulwf	___wmul@multiplicand+1,c
   878  0002F8  50F3               	movf	prodl,w,c
   879  0002FA  2618               	addwf	___wmul@product+1,f,c
   880  0002FC  5014               	movf	___wmul@multiplier+1,w,c
   881  0002FE  0215               	mulwf	___wmul@multiplicand,c
   882  000300  50F3               	movf	prodl,w,c
   883  000302  2618               	addwf	___wmul@product+1,f,c
   884  000304  C017  F013         	movff	___wmul@product,?___wmul
   885  000308  C018  F014         	movff	___wmul@product+1,?___wmul+1
   886  00030C  0012               	return	
   887  00030E  0012               	return		;funcret
   888  000310                     __end_of___wmul:
   889                           	opt stack 0
   890                           prodh	equ	0xFF4
   891                           prodl	equ	0xFF3
   892                           postinc0	equ	0xFEE
   893                           wreg	equ	0xFE8
   894                           plusw1	equ	0xFE3
   895                           indf2	equ	0xFDF
   896                           plusw2	equ	0xFDB
   897                           fsr2h	equ	0xFDA
   898                           fsr2l	equ	0xFD9
   899                           status	equ	0xFD8
   900                           
   901 ;; *************** function _isr *****************
   902 ;; Defined at:
   903 ;;		line 82 in file "main.c"
   904 ;; Parameters:    Size  Location     Type
   905 ;;		None
   906 ;; Auto vars:     Size  Location     Type
   907 ;;  byte            1   17[COMRAM] unsigned char 
   908 ;; Return value:  Size  Location     Type
   909 ;;		None               void
   910 ;; Registers used:
   911 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   912 ;; Tracked objects:
   913 ;;		On entry : 0/0
   914 ;;		On exit  : 0/0
   915 ;;		Unchanged: 0/0
   916 ;; Data sizes:     COMRAM   BANK0
   917 ;;      Params:         0       0
   918 ;;      Locals:         1       0
   919 ;;      Temps:         14       0
   920 ;;      Totals:        15       0
   921 ;;Total ram usage:       15 bytes
   922 ;; Hardware stack levels used:    1
   923 ;; Hardware stack levels required when called:    1
   924 ;; This function calls:
   925 ;;		_serial_peek_receive
   926 ;;		i2_serial_send_byte
   927 ;; This function is called by:
   928 ;;		Interrupt level 2
   929 ;; This function uses a non-reentrant model
   930 ;;
   931                           
   932                           	psect	intcode
   933  000008                     __pintcode:
   934                           	opt stack 0
   935  000008                     _isr:
   936                           	opt stack 27
   937                           
   938                           ;incstack = 0
   939  000008  CFFA F004          	movff	pclath,??_isr
   940  00000C  CFFB F005          	movff	pclatu,??_isr+1
   941  000010  CFE9 F006          	movff	fsr0l,??_isr+2
   942  000014  CFEA F007          	movff	fsr0h,??_isr+3
   943  000018  CFE1 F008          	movff	fsr1l,??_isr+4
   944  00001C  CFE2 F009          	movff	fsr1h,??_isr+5
   945  000020  CFD9 F00A          	movff	fsr2l,??_isr+6
   946  000024  CFDA F00B          	movff	fsr2h,??_isr+7
   947  000028  CFF3 F00C          	movff	prodl,??_isr+8
   948  00002C  CFF4 F00D          	movff	prodh,??_isr+9
   949  000030  CFF6 F00E          	movff	tblptrl,??_isr+10
   950  000034  CFF7 F00F          	movff	tblptrh,??_isr+11
   951  000038  CFF8 F010          	movff	tblptru,??_isr+12
   952  00003C  CFF5 F011          	movff	tablat,??_isr+13
   953                           
   954                           ;main.c: 84: uint8_t byte;
   955                           ;main.c: 85: if (serial_peek_receive(1, &byte))
   956  000040  0E12               	movlw	low isr@byte
   957  000042  6E01               	movwf	serial_peek_receive@byte,c
   958  000044  0E00               	movlw	high isr@byte
   959  000046  6E02               	movwf	serial_peek_receive@byte+1,c
   960  000048  0E01               	movlw	1
   961  00004A  EC5D  F001         	call	_serial_peek_receive
   962  00004E  0900               	iorlw	0
   963  000050  B4D8               	btfsc	status,2,c
   964  000052  D004               	goto	i2l33
   965                           
   966                           ;main.c: 86: serial_send_byte(byte);
   967  000054  5012               	movf	isr@byte,w,c
   968  000056  EC98  F001         	call	i2_serial_send_byte
   969  00005A  D000               	goto	i2l33
   970  00005C                     i2l33:
   971  00005C  C011  FFF5         	movff	??_isr+13,tablat
   972  000060  C010  FFF8         	movff	??_isr+12,tblptru
   973  000064  C00F  FFF7         	movff	??_isr+11,tblptrh
   974  000068  C00E  FFF6         	movff	??_isr+10,tblptrl
   975  00006C  C00D  FFF4         	movff	??_isr+9,prodh
   976  000070  C00C  FFF3         	movff	??_isr+8,prodl
   977  000074  C00B  FFDA         	movff	??_isr+7,fsr2h
   978  000078  C00A  FFD9         	movff	??_isr+6,fsr2l
   979  00007C  C009  FFE2         	movff	??_isr+5,fsr1h
   980  000080  C008  FFE1         	movff	??_isr+4,fsr1l
   981  000084  C007  FFEA         	movff	??_isr+3,fsr0h
   982  000088  C006  FFE9         	movff	??_isr+2,fsr0l
   983  00008C  C005  FFFB         	movff	??_isr+1,pclatu
   984  000090  C004  FFFA         	movff	??_isr,pclath
   985  000094  0011               	retfie		f
   986  000096                     __end_of_isr:
   987                           	opt stack 0
   988                           pclatu	equ	0xFFB
   989                           pclath	equ	0xFFA
   990                           tblptru	equ	0xFF8
   991                           tblptrh	equ	0xFF7
   992                           tblptrl	equ	0xFF6
   993                           tablat	equ	0xFF5
   994                           prodh	equ	0xFF4
   995                           prodl	equ	0xFF3
   996                           postinc0	equ	0xFEE
   997                           fsr0h	equ	0xFEA
   998                           fsr0l	equ	0xFE9
   999                           wreg	equ	0xFE8
  1000                           plusw1	equ	0xFE3
  1001                           fsr1h	equ	0xFE2
  1002                           fsr1l	equ	0xFE1
  1003                           indf2	equ	0xFDF
  1004                           plusw2	equ	0xFDB
  1005                           fsr2h	equ	0xFDA
  1006                           fsr2l	equ	0xFD9
  1007                           status	equ	0xFD8
  1008                           
  1009 ;; *************** function i2_serial_send_byte *****************
  1010 ;; Defined at:
  1011 ;;		line 66 in file "serial_pic.c"
  1012 ;; Parameters:    Size  Location     Type
  1013 ;;  byte            1    wreg     unsigned char 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  byte            1    0[COMRAM] unsigned char 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;		None               void
  1018 ;; Registers used:
  1019 ;;		wreg
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0
  1025 ;;      Params:         0       0
  1026 ;;      Locals:         1       0
  1027 ;;      Temps:          0       0
  1028 ;;      Totals:         1       0
  1029 ;;Total ram usage:        1 bytes
  1030 ;; Hardware stack levels used:    1
  1031 ;; This function calls:
  1032 ;;		Nothing
  1033 ;; This function is called by:
  1034 ;;		_isr
  1035 ;; This function uses a non-reentrant model
  1036 ;;
  1037                           
  1038                           	psect	text8
  1039  000330                     __ptext8:
  1040                           	opt stack 0
  1041  000330                     i2_serial_send_byte:
  1042                           	opt stack 27
  1043                           
  1044                           ;incstack = 0
  1045                           ;i2serial_send_byte@byte stored from wreg
  1046  000330  6E01               	movwf	i2serial_send_byte@byte,c
  1047                           
  1048                           ;serial_pic.c: 68: while (!TXIF);
  1049  000332  D000               	goto	i2l102
  1050  000334                     i2l102:
  1051  000334  A89E               	btfss	3998,4,c	;volatile
  1052  000336  D7FE               	goto	i2l102
  1053                           
  1054                           ;serial_pic.c: 69: TXREG = byte;
  1055  000338  C001  FFAD         	movff	i2serial_send_byte@byte,4013	;volatile
  1056  00033C  0012               	return		;funcret
  1057  00033E                     __end_ofi2_serial_send_byte:
  1058                           	opt stack 0
  1059                           pclatu	equ	0xFFB
  1060                           pclath	equ	0xFFA
  1061                           tblptru	equ	0xFF8
  1062                           tblptrh	equ	0xFF7
  1063                           tblptrl	equ	0xFF6
  1064                           tablat	equ	0xFF5
  1065                           prodh	equ	0xFF4
  1066                           prodl	equ	0xFF3
  1067                           postinc0	equ	0xFEE
  1068                           fsr0h	equ	0xFEA
  1069                           fsr0l	equ	0xFE9
  1070                           wreg	equ	0xFE8
  1071                           plusw1	equ	0xFE3
  1072                           fsr1h	equ	0xFE2
  1073                           fsr1l	equ	0xFE1
  1074                           indf2	equ	0xFDF
  1075                           plusw2	equ	0xFDB
  1076                           fsr2h	equ	0xFDA
  1077                           fsr2l	equ	0xFD9
  1078                           status	equ	0xFD8
  1079                           
  1080 ;; *************** function _serial_peek_receive *****************
  1081 ;; Defined at:
  1082 ;;		line 29 in file "serial_pic.c"
  1083 ;; Parameters:    Size  Location     Type
  1084 ;;  get_byte        1    wreg     unsigned char 
  1085 ;;  byte            2    0[COMRAM] PTR unsigned char 
  1086 ;;		 -> isr@byte(1), 
  1087 ;; Auto vars:     Size  Location     Type
  1088 ;;  get_byte        1    2[COMRAM] unsigned char 
  1089 ;; Return value:  Size  Location     Type
  1090 ;;                  1    wreg      unsigned char 
  1091 ;; Registers used:
  1092 ;;		wreg, fsr2l, fsr2h, status,2
  1093 ;; Tracked objects:
  1094 ;;		On entry : 0/0
  1095 ;;		On exit  : 0/0
  1096 ;;		Unchanged: 0/0
  1097 ;; Data sizes:     COMRAM   BANK0
  1098 ;;      Params:         2       0
  1099 ;;      Locals:         1       0
  1100 ;;      Temps:          0       0
  1101 ;;      Totals:         3       0
  1102 ;;Total ram usage:        3 bytes
  1103 ;; Hardware stack levels used:    1
  1104 ;; This function calls:
  1105 ;;		Nothing
  1106 ;; This function is called by:
  1107 ;;		_isr
  1108 ;; This function uses a non-reentrant model
  1109 ;;
  1110                           
  1111                           	psect	text9
  1112  0002BA                     __ptext9:
  1113                           	opt stack 0
  1114  0002BA                     _serial_peek_receive:
  1115                           	opt stack 27
  1116                           
  1117                           ;incstack = 0
  1118                           ;serial_peek_receive@get_byte stored from wreg
  1119  0002BA  6E03               	movwf	serial_peek_receive@get_byte,c
  1120                           
  1121                           ;serial_pic.c: 31: if (get_byte) {
  1122  0002BC  5003               	movf	serial_peek_receive@get_byte,w,c
  1123  0002BE  B4D8               	btfsc	status,2,c
  1124  0002C0  D00E               	goto	i2l1321
  1125                           
  1126                           ;serial_pic.c: 32: if (RCIF) {
  1127  0002C2  AA9E               	btfss	3998,5,c	;volatile
  1128  0002C4  D009               	goto	i2l1317
  1129                           
  1130                           ;serial_pic.c: 33: *byte = RCREG;
  1131  0002C6  C001  FFD9         	movff	serial_peek_receive@byte,fsr2l
  1132  0002CA  C002  FFDA         	movff	serial_peek_receive@byte+1,fsr2h
  1133  0002CE  CFAE FFDF          	movff	4014,indf2	;volatile
  1134                           
  1135                           ;serial_pic.c: 34: return 1;
  1136  0002D2  0E01               	movlw	1
  1137  0002D4  0012               	return	
  1138                           
  1139                           ;serial_pic.c: 35: } else {
  1140  0002D6  D003               	goto	i2l1321
  1141  0002D8                     i2l1317:
  1142                           
  1143                           ;serial_pic.c: 36: return 0;
  1144  0002D8  0E00               	movlw	0
  1145  0002DA  0012               	return	
  1146  0002DC  D000               	goto	i2l1321
  1147  0002DE                     i2l1321:
  1148                           
  1149                           ;serial_pic.c: 37: }
  1150                           ;serial_pic.c: 38: }
  1151                           ;serial_pic.c: 40: return (RCIF) ? 1 : 0;
  1152  0002DE  0E00               	movlw	0
  1153  0002E0  BA9E               	btfsc	3998,5,c	;volatile
  1154  0002E2  0E01               	movlw	1
  1155  0002E4  0012               	return	
  1156  0002E6  0012               	return		;funcret
  1157  0002E8                     __end_of_serial_peek_receive:
  1158                           	opt stack 0
  1159  0000                     pclatu	equ	0xFFB
  1160                           pclath	equ	0xFFA
  1161                           tblptru	equ	0xFF8
  1162                           tblptrh	equ	0xFF7
  1163                           tblptrl	equ	0xFF6
  1164                           tablat	equ	0xFF5
  1165                           prodh	equ	0xFF4
  1166                           prodl	equ	0xFF3
  1167                           postinc0	equ	0xFEE
  1168                           fsr0h	equ	0xFEA
  1169                           fsr0l	equ	0xFE9
  1170                           wreg	equ	0xFE8
  1171                           plusw1	equ	0xFE3
  1172                           fsr1h	equ	0xFE2
  1173                           fsr1l	equ	0xFE1
  1174                           indf2	equ	0xFDF
  1175                           plusw2	equ	0xFDB
  1176                           fsr2h	equ	0xFDA
  1177                           fsr2l	equ	0xFD9
  1178                           status	equ	0xFD8
  1179                           pclatu	equ	0xFFB
  1180                           pclath	equ	0xFFA
  1181                           tblptru	equ	0xFF8
  1182                           tblptrh	equ	0xFF7
  1183                           tblptrl	equ	0xFF6
  1184                           tablat	equ	0xFF5
  1185                           prodh	equ	0xFF4
  1186                           prodl	equ	0xFF3
  1187                           postinc0	equ	0xFEE
  1188                           fsr0h	equ	0xFEA
  1189                           fsr0l	equ	0xFE9
  1190                           wreg	equ	0xFE8
  1191                           plusw1	equ	0xFE3
  1192                           fsr1h	equ	0xFE2
  1193                           fsr1l	equ	0xFE1
  1194                           indf2	equ	0xFDF
  1195                           plusw2	equ	0xFDB
  1196                           fsr2h	equ	0xFDA
  1197                           fsr2l	equ	0xFD9
  1198                           status	equ	0xFD8
  1199                           
  1200                           	psect	rparam
  1201  0000                     pclatu	equ	0xFFB
  1202                           pclath	equ	0xFFA
  1203                           tblptru	equ	0xFF8
  1204                           tblptrh	equ	0xFF7
  1205                           tblptrl	equ	0xFF6
  1206                           tablat	equ	0xFF5
  1207                           prodh	equ	0xFF4
  1208                           prodl	equ	0xFF3
  1209                           postinc0	equ	0xFEE
  1210                           fsr0h	equ	0xFEA
  1211                           fsr0l	equ	0xFE9
  1212                           wreg	equ	0xFE8
  1213                           plusw1	equ	0xFE3
  1214                           fsr1h	equ	0xFE2
  1215                           fsr1l	equ	0xFE1
  1216                           indf2	equ	0xFDF
  1217                           plusw2	equ	0xFDB
  1218                           fsr2h	equ	0xFDA
  1219                           fsr2l	equ	0xFD9
  1220                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     40      51
    BANK0           160      0       0

Pointer List with Targets:

    serial_send_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_load_buffer@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_disable_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    S108interrupt_serial$data	PTR unsigned char  size(2) Largest target is 0

    serial_interrupts@interrupt_data.data	PTR unsigned char  size(2) Largest target is 0

    serial_send_data@data	PTR unsigned char  size(2) Largest target is 10
		 -> main@data(COMRAM[10]), 

    serial_get_data@data	PTR unsigned char  size(2) Largest target is 10
		 -> main@data(COMRAM[10]), 

    serial_peek_receive@byte	PTR unsigned char  size(2) Largest target is 1
		 -> isr@byte(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _main->_serial_get_data
    _main->_serial_send_data
    _serial_send_data->___wmul
    _serial_get_data->___wmul

Critical Paths under _isr in COMRAM

    _isr->_serial_peek_receive

Critical Paths under _main in BANK0

    None.

Critical Paths under _isr in BANK0

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                11    11      0    7463
                                             29 COMRAM    11    11      0
                    _serial_get_data
                   _serial_send_byte
                   _serial_send_data
                _setup_simple_serial
 ---------------------------------------------------------------------------------
 (1) _setup_simple_serial                                  7     5      2     200
                                             18 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (1) _serial_send_data                                     5     2      3    3582
                                             24 COMRAM     5     2      3
                             ___wmul
                   _serial_send_byte
 ---------------------------------------------------------------------------------
 (2) _serial_send_byte                                     1     1      0      15
                                             18 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _serial_get_data                                      5     2      3    3611
                                             24 COMRAM     5     2      3
                             ___wmul
                    _serial_get_byte
 ---------------------------------------------------------------------------------
 (2) _serial_get_byte                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    3231
                                             18 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _isr                                                 15    15      0     176
                                              3 COMRAM    15    15      0
                _serial_peek_receive
                 i2_serial_send_byte
 ---------------------------------------------------------------------------------
 (4) i2_serial_send_byte                                   1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _serial_peek_receive                                  3     1      2     108
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _serial_get_data
     ___wmul
     _serial_get_byte
   _serial_send_byte
   _serial_send_data
     ___wmul
     _serial_send_byte
   _setup_simple_serial

 _isr (ROOT)
   _serial_peek_receive
   i2_serial_send_byte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
EEDATA             100      0       0       0        0.0%
BIGRAM              FF      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     28      33       1       53.7%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      33       5        0.0%
DATA                 0      0      33       7        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Jul 29 16:46:23 2015

                      _SSPSTATbits 000FC7                                 l85 0340  
       __end_ofi2_serial_send_byte 033E                ___wmul@multiplicand 0015  
                     __CFG_CP0$OFF 000000                       __CFG_CP1$OFF 000000  
                              l102 0326                       __CFG_CPB$OFF 000000  
                     __CFG_CPD$OFF 000000                                u721 023E  
                              u927 021C                                _isr 0008  
                     __CFG_BORV$19 000000                                wreg 000FE8  
                     __CFG_FOSC$HS 000000                       __CFG_LVP$OFF 000000  
                             l1303 0200                               l1251 0284  
                             l1261 02AC                               l1253 028E  
                             l1273 00D0                               l1337 024E  
                             l1283 0152                               l1259 02A2  
                             l1269 00A4                               l1277 0120  
                             l1293 019E                               l1279 0126  
                             l1289 0172                               l1297 01CE  
                             l1299 01D4                               ?_isr 0001  
                             _RCIE 007CED                               _RCIF 007CF5  
                             i2l33 005C                               _TMR3 000FB2  
                             _TXIE 007CEC                               _TXIF 007CF4  
                             _main 0216                               fsr0h 000FEA  
                             fsr1h 000FE2                               fsr0l 000FE9  
                             fsr2h 000FDA                               fsr1l 000FE1  
                             indf2 000FDF                               fsr2l 000FD9  
                             pclat 000FFA                               prodh 000FF4  
                             prodl 000FF3                               start 0096  
                    __CFG_IESO$OFF 000000                      __CFG_MCLRE$ON 000000  
                     ___param_bank 000010               serial_send_data@data 0019  
          __end_of_serial_get_data 0168               serial_send_data@size 001B  
          __end_of_serial_get_byte 034A                              ??_isr 0004  
                            ?_main 0001                              _T3CON 000FB1  
                            i2l102 0334                              _RCREG 000FAE  
                   __CFG_BBSIZ$OFF 000000                              _RCSTA 000FAB  
                            _SPBRG 000FAF                              _SSPIF 007CF3  
                            _TXREG 000FAD                              _TXSTA 000FAC  
                    __CFG_WRT0$OFF 000000                      __CFG_WRT1$OFF 000000  
                   __CFG_EBTR0$OFF 000000                     __CFG_FCMEN$OFF 000000  
                   __CFG_EBTR1$OFF 000000                      __CFG_WRTB$OFF 000000  
                    __CFG_WRTC$OFF 000000                      __CFG_WRTD$OFF 000000  
                   __CFG_EBTRB$OFF 000000                              tablat 000FF5  
             serial_send_byte@byte 0013                              plusw1 000FE3  
                            plusw2 000FDB                              status 000FD8  
                   __CFG_HFOFST$ON 000000                  serial_send_data@i 001D  
                  __initialization 0310                       __end_of_main 0274  
                   __CFG_PCLKEN$ON 000000                             ??_main 001E  
                    __activetblptr 000000                     __CFG_PLLEN$OFF 000000  
                           i2l1321 02DE                             i2l1317 02D8  
                   __CFG_WDTEN$OFF 000000                             _INTCON 000FF2  
                           _SPBRGH 000FB0                             _SSPBUF 000FC9  
         __end_of_serial_send_data 0216           __end_of_serial_send_byte 0330  
                   __CFG_XINST$OFF 000000                   ?_serial_get_data 0019  
                           ___wmul 02E8                     __CFG_STVREN$ON 000000  
                 ?_serial_get_byte 0001                             clear_0 0316  
      __end_of_setup_simple_serial 02BA                             tblptrh 000FF7  
                           tblptrl 000FF6                             tblptru 000FF8  
                       __accesstop 0060            __end_of__initialization 031C  
                    ___rparam_used 000001       __size_of_serial_peek_receive 002E  
                   __pcstackCOMRAM 0001                 i2_serial_send_byte 0330  
              ?i2_serial_send_byte 0001            serial_peek_receive@byte 0001  
                          ?___wmul 0013                            _BAUDCON 000FB8  
             ??i2_serial_send_byte 0001                            _SSPCON1 000FC6  
                          _SSPSTAT 000FC7                    __CFG_PWRTEN$OFF 000000  
                          __Hparam 0000                            __Lparam 0000  
                  __size_of___wmul 0028                         _dummy_byte 0033  
                          __pcinit 0310                            __ramtop 0100  
                          __ptext0 0216                            __ptext1 0274  
                          __ptext2 0168                            __ptext3 0322  
                          __ptext4 009A                            __ptext5 033E  
                          __ptext6 02E8                            __ptext8 0330  
                          __ptext9 02BA                       __size_of_isr 008E  
             end_of_initialization 031C                            isr@byte 0012  
                ?_serial_send_data 0019                  ?_serial_send_byte 0001  
               ??_serial_send_data 001C                 ??_serial_send_byte 0013  
                        _RCSTAbits 000FAB                            postinc0 000FEE  
              _serial_peek_receive 02BA                          _TRISBbits 000F93  
                        _TRISCbits 000F94               ?_serial_peek_receive 0001  
                   __end_of___wmul 0310           __size_of_serial_get_data 00CE  
         __size_of_serial_get_byte 000C                start_initialization 0310  
                      __end_of_isr 0096       __size_of_setup_simple_serial 0046  
            ??_serial_peek_receive 0003                           ??___wmul 0017  
                      __pbssCOMRAM 0029                          __pintcode 0008  
      serial_peek_receive@get_byte 0003        __size_ofi2_serial_send_byte 000E  
 setup_simple_serial@baudrate_bits 0019                  ??_serial_get_data 001C  
                ??_serial_get_byte 0013             i2serial_send_byte@byte 0001  
                   ___wmul@product 0017                           _PIE2bits 000FA0  
                         _PIR2bits 000FA1                   __CFG_WDTPS$32768 000000  
                        main@F3928 0029                  ___wmul@multiplier 0013  
        __size_of_serial_send_data 00AE          __size_of_serial_send_byte 000E  
                         __Hrparam 0000                           __Lrparam 0000  
               __CFG_BOREN$SBORDIS 000000                serial_get_data@data 0019  
              serial_get_data@size 001B                _setup_simple_serial 0274  
                       _ANSELHbits 000F7F               ?_setup_simple_serial 0013  
                    __size_of_main 005E                           main@data 001F  
      __end_of_serial_peek_receive 02E8              ??_setup_simple_serial 0015  
                         intlevel2 0000                   _serial_send_data 0168  
                  _serial_get_data 009A                   _serial_send_byte 0322  
                  _serial_get_byte 033E                        _SSPCON1bits 000FC6  
                 serial_get_data@i 001D  setup_simple_serial@baudrate_value 0013  
          _setup_simple_serial$182 0015            _setup_simple_serial$183 0017  
