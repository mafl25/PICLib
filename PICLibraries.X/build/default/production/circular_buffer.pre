
# 1 "circular_buffer.c"

# 13 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdint.h"
typedef signed char int8_t;

# 20
typedef signed int int16_t;

# 28
typedef signed short long int int24_t;

# 36
typedef signed long int int32_t;

# 43
typedef unsigned char uint8_t;

# 49
typedef unsigned int uint16_t;

# 56
typedef unsigned short long int uint24_t;

# 63
typedef unsigned long int uint32_t;

# 71
typedef signed char int_least8_t;

# 78
typedef signed int int_least16_t;

# 90
typedef signed short long int int_least24_t;

# 98
typedef signed long int int_least32_t;

# 105
typedef unsigned char uint_least8_t;

# 111
typedef unsigned int uint_least16_t;

# 121
typedef unsigned short long int uint_least24_t;

# 128
typedef unsigned long int uint_least32_t;

# 137
typedef signed char int_fast8_t;

# 144
typedef signed int int_fast16_t;

# 156
typedef signed short long int int_fast24_t;

# 164
typedef signed long int int_fast32_t;

# 171
typedef unsigned char uint_fast8_t;

# 177
typedef unsigned int uint_fast16_t;

# 187
typedef unsigned short long int uint_fast24_t;

# 194
typedef unsigned long int uint_fast32_t;

# 200
typedef int32_t intmax_t;




typedef uint32_t uintmax_t;




typedef int16_t intptr_t;




typedef uint16_t uintptr_t;

# 12 "C:\Program Files (x86)\Microchip\xc8\v1.34\include\stdbool.h"
typedef unsigned char bool;

# 10 "circular_buffer.h"
struct circular_buffer {
uint8_t position;
uint8_t count;
uint8_t data[0x20];
};

# 21
int16_t buffer_pop(struct circular_buffer *buffer);

# 27
bool buffer_push(struct circular_buffer *buffer, uint8_t byte);

# 33
bool buffer_full(const struct circular_buffer *buffer);

# 39
bool buffer_empty(const struct circular_buffer *buffer);

# 45
uint8_t buffer_count(const struct circular_buffer *buffer);

# 51
uint8_t buffer_space(const struct circular_buffer *buffer);

# 4 "circular_buffer.c"
uint8_t buffer_count(const struct circular_buffer *buffer)
{
return buffer->count;
}

uint8_t buffer_space(const struct circular_buffer *buffer)
{
return 0x20 - buffer->count;
}

bool buffer_empty(const struct circular_buffer *buffer)
{
return (buffer->count == 0) ? 1 : 0;
}

bool buffer_full(const struct circular_buffer *buffer)
{
return (buffer->count == 0x20) ? 1 : 0;
}

bool buffer_push(struct circular_buffer *buffer, uint8_t byte)
{
if (buffer->count == 0x20) {
return 0;
} else {
uint8_t current_position = (buffer->position + buffer->count)
& (0x20 - 1);
buffer->data[current_position] = byte;
buffer->count++;
return 1;
}
}

int16_t buffer_pop(struct circular_buffer *buffer)
{
if (buffer->count <= 0) {
return -1;
}

int16_t byte = (buffer->data[buffer->position]) & 0xFF;
buffer->position = (buffer->position + 1) & (0x20 - 1);
buffer->count--;

return byte;
}

